---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch
spec:
  selector:
    matchLabels:
      name: elasticsearch
  replicas: ${ELASTICSEARCH_K8S_REPLICAS}
  template:
    metadata:
      labels:
        name: elasticsearch
    spec:
      containers:
        - name: elasticsearch
          image: ${ELASTICSEARCH_K8S_IMAGE}
          imagePullPolicy: Always
          ports:
          - containerPort: ${ELASTICSEARCH_CLIENT_PORT}
          - containerPort: ${ELASTICSEARCH_SERVER_PORT}
            
          securityContext:
            runAsNonRoot: true
            #          env:
            #- name: discovery.type
            #  value: single-node
          resources:
            requests:
              cpu: ${ELASTICSEARCH_K8S_REQUESTS_CPU}
              memory: ${ELASTICSEARCH_K8S_REQUESTS_MEMORY}
            limits:
              cpu: ${ELASTICSEARCH_K8S_LIMITS_CPU}
              memory: ${ELASTICSEARCH_K8S_LIMITS_MEMORY}
      restartPolicy: Always
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: ${ELASTICSEARCH_K8S_REPLICAS_MAX_UNAVAILABLE}
      maxSurge: ${ELASTICSEARCH_K8S_REPLICAS}

---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  labels:
    name: elasticsearch
    role: service
spec:
  ports:
    - name: elastic-client-port
      protocol: TCP
      port: ${ELASTICSEARCH_CLIENT_PORT}
    - name: elastic-server-port
      protocol: TCP
      port: ${ELASTICSEARCH_SERVER_PORT}
  selector:
    name: elasticsearch
  sessionAffinity: None

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ingress-network-policy-elasticsearch
spec:
  podSelector:
    matchLabels:
      name: elasticsearch
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ${KUBE_NAMESPACE}
      ports:
        - protocol: TCP
          port: ${ELASTICSEARCH_CLIENT_PORT}

  
